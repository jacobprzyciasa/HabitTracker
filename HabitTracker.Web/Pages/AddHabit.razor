@page "/add"
@inject NavigationManager NavManager
@inject IHabitListService habitListService
@inject IMapper mapper
@inject ILocalStorageService localStogareService
@inject IHabitService habitService

<div class="add-habit">
    <img @onclick="CloseForm" src="images/x.svg" />

    <div class="add-habit-form">

        <h3>AddHabit</h3>

        <div class="add-habit-content">
            <form onsubmit="@Submit">
                <input type="text" @bind-value="name" placeholder="title" />
                <input type="text" @bind-value="description" placeholder="description" />
                <button type="submit">Add</button>
            </form>
            <p>@message</p>
        </div>
    </div>

</div>


@code {
    string name;
    string description;
    string message = "";

    public async void Submit()
    {
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(description))
        {
            HabitList habitList = await GetUserMainHabitList();
            habitList.Habits = new List<Habit>();
            HabitForCreationDto habitForCreation = new(name, description, habitList, new List<HabitCompleteStatus>());
            HabitDto responseHabit = await habitService.AddHabit(habitForCreation);
            if (responseHabit is not null)
            {
                NavManager.NavigateTo("/");
            }
        }
        else
        {
            message = "fill both inputs";
        }


    }


    private void CloseForm()
    {
        NavManager.NavigateTo("/");
    }

    private async Task<HabitList> GetUserMainHabitList()
    {
        int userId = await localStogareService.GetItemAsync<int>("userId");
        List<HabitListDto> habitListDto = await habitListService.GetHabitListByUserId(userId);
        return mapper.Map<HabitList>(habitListDto.First());
    }
}
