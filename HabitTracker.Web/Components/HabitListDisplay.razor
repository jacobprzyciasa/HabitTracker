@using Blazored.LocalStorage
@using HabitTracker.Shared.DataTransferObjects
@inject IHabitListService habitListService
@inject ILocalStorageService localStogareService
@inject IMapper mapper
@inject IUserService userService

@if (!(habitList is null))
{
    <h3>@habitList.Name</h3>
    @if (habitList.Habits.Count == 0)
    {
        <p>nic nie ma</p>
    }
    else
    {
        foreach (Habit i in habitList.Habits)
        {
            <HabitDisplay settings="@settings" habit="i"></HabitDisplay>
        }
    }
}

<button @onclick="Refresh">Ref</button>

@code{

    [Parameter]
    public bool settings { get; set; }

    public HabitList habitList { get; set; }


    public async void Refresh()
    {
        int userId = await localStogareService.GetItemAsync<int>("userId");
        List<HabitListDto> getHabitList = await habitListService.GetHabitListByUserId(userId);
        if (getHabitList.Count == 0)
        {

            HabitList newHabitList = new();
            newHabitList.Name = "All";
            newHabitList.Habits = new List<Habit>();
            newHabitList.UserHabitLists = new List<UserHabitList>();


            UserHabitList userHabitList = new();
            userHabitList.User = mapper.Map<User>(await userService.GetUserById(userId));
            userHabitList.Role = HabitRole.Owner;
            newHabitList.UserHabitLists.Add(userHabitList);

            HabitListDto dto = await habitListService.AddHabitList(mapper.Map<HabitListForCreationDto>(newHabitList));
            Console.WriteLine(dto.Id);
            habitList = mapper.Map<HabitList>(dto);
            StateHasChanged();
        }
        else
        {
            habitList = mapper.Map<HabitList>(getHabitList.First());
            Console.WriteLine(habitList.Id);
            StateHasChanged();
        }

        base.OnInitialized();
    }

    protected override async void OnInitialized()
    {
        Refresh();
    }
}
