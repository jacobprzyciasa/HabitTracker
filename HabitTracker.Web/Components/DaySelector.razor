@inject ILocalStorageService localStorageService;


<div class="calendar-div">
    <ul>
        <li @onclick="(() => DaySelect(1, 0))">
            <p>MON</p>
            <div>
                <p>@GetDay(0)</p>
            </div>
            <div class="current-day-indycator @classNames[1]"></div>
        </li>
        <li @onclick="(() => DaySelect(2,1))">
            <p>TUE</p>
            <div>
                <p>@GetDay(1)</p>
            </div>
            <div class="current-day-indycator @classNames[2]"></div>
        </li>
        <li @onclick="(() => DaySelect(3,2))">
            <p>WED</p>
            <div>
                <p>@GetDay(2)</p>
            </div>
            <div class="current-day-indycator @classNames[3]"></div>
        </li>
        <li @onclick="(() => DaySelect(4,3))">
            <p>THU</p>
            <div>
                <p>@GetDay(3)</p>
            </div>
            <div class="current-day-indycator @classNames[4]"></div>
        </li>
        <li @onclick="(() => DaySelect(5,4))">
            <p>FRI</p>
            <div>
                <p>@GetDay(4)</p>
            </div>
            <div class="current-day-indycator @classNames[5]"></div>
        </li>
        <li @onclick="(() => DaySelect(6,5))">
            <p>SAT</p>
            <div>
                <p>@GetDay(5)</p>
            </div>
            <div class="current-day-indycator @classNames[6]"></div>
        </li>
        <li @onclick="(() => DaySelect(0,6))">
            <p>SUN</p>
            <div>
                <p>@GetDay(6)</p>
            </div>
            <div class="current-day-indycator @classNames[0]"></div>
        </li>
    </ul>
</div>

@code {
    public int dayOfWeek = (int)DateTime.Now.DayOfWeek;
    public int today = DateTime.Today.Day;
    public string[] classNames = { "", "", "", "", "", "", "" };
    [Parameter]
    public bool currentWeek { get; set; }

    [Parameter]
    public EventCallback Refresh { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (currentWeek)
        {
            classNames[dayOfWeek + 1] = "today"; 
        }

        await localStorageService.SetItemAsync<DateOnly>("day", DateOnly.FromDateTime(DateTime.Today));
    }

    private int GetDay(int pos)
    {
        if (pos == dayOfWeek)
        {
            return today;   
        }
        else
        {
            return today - (dayOfWeek - pos);
        }
    }

    private async Task DaySelect(int id, int pos)
    {
        for (int i = 0; i < 7; i++)
        {
            classNames[i] = "";
        }

        classNames[id] = "today";


        var todayDate = DateOnly.FromDateTime(DateTime.Now);

        await localStorageService.SetItemAsync<DateOnly>("day", todayDate.AddDays((dayOfWeek - pos)*(-1)));

    }
}
