@inject IHabitService habitService
@inject IMapper mapper
@inject NavigationManager NavManager


<div class="habit-content @(settings ? "editable" : "")" style="text-decoration: @textDecoration;">
    <div class="habit-content-main">

        <div class="img-and-description">

            <img src="@imageSrc" class="habit-prof-img"/>
            <h2 @onclick="Cross">@habit.Name</h2>
        </div>

        @if (settings)
        {
            <img src="/images/menu-outline.svg" class="toggle" @onclick="EditHabit"/>
        }
    </div>
    <div class="habit-content-settings @editMenu">
        <div class="habit-edit-hidden">

            <button @onclick="@(() => { DeleteHabit(); Refresh.InvokeAsync(); })" class="delete">delete</button>
        </div>
    </div>
</div>

@code {
    public string imageSrc { get; set; }
    [Parameter]
    public bool settings { get; set; }

    [Parameter]
    public Habit habit { get; set; }

    [Parameter]
    public EventCallback Refresh { get; set; }

    public string doneClass = "";

    public string editMenu = "nonedit";

    public string textDecoration = "none";

    async Task ChangeHabitDoneStatus()
    {
        HabitCompleteStatus todayStatus = habit.DailyCompleteStatus.Where(c => c.Date == DateOnly.FromDateTime(DateTime.Now)).FirstOrDefault()!;
        if (todayStatus is null)
            AddHabitCompleteStatus(DateOnly.FromDateTime(DateTime.Now));

        if (doneClass == "complete")
        {
            doneClass = "failed";

        }
        else
        {
            doneClass = "complete";

        }
    }


    async Task AddHabitCompleteStatus(DateOnly date)
    {

    }


    protected override void OnInitialized()
    {
        HabitCompleteStatus todayStatus = habit.DailyCompleteStatus.Where(c => c.Date == DateOnly.FromDateTime(DateTime.Now)).FirstOrDefault()!;
        if (todayStatus is null)
            doneClass = "";
        else if (todayStatus.Complete)
            doneClass = "complete";
        else
            doneClass = "failed";        base.OnInitialized();
    }


    public async Task DeleteHabit()
    {
        habit.HabitList.Habits = new List<Habit>();
        HabitDto habitToDelete = mapper.Map<HabitDto>(habit);
        await habitService.DeleteHabit(habitToDelete);
        await Refresh.InvokeAsync();
        StateHasChanged();
    }


    public void EditHabit()
    {
        if(editMenu == "nonedit")
        {
            editMenu = "edit";
        }
        else
        {
            editMenu = "nonedit";
        }
    }

    public void Cross()
    {
        if (textDecoration == "none")
        {
            textDecoration = "line-through";

        }
        else
        {
            textDecoration = "none";
        }
    }

}
