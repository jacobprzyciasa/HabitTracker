@inject IHabitService habitService
@inject IUserService userService
@inject IMapper mapper
@inject NavigationManager NavManager
@inject ILocalStorageService localStorageService


<div class="habit-content @(settings ? "editable" : "")">
    <div class="habit-content-main">

        <div class="img-and-description">

            <img src="@imageSrc" class="habit-prof-img"/>
            <h2>@habit.Name</h2>
        </div>

        <button class="habit-check @doneClass" @onclick="ChangeHabitDoneStatus">
            @* done/not done *@
        </button>

        @if (settings)
        {
            <img src="/images/menu-outline.svg" class="toggle" @onclick="EditHabit"/>
        }
    </div>
    <div class="habit-content-settings @editMenu">
        <div class="habit-edit-hidden">

            <button @onclick="@(() => { DeleteHabit(); Refresh.InvokeAsync(); })" class="delete">delete</button>
        </div>
    </div>
</div>

@code {
    public string imageSrc { get; set; }
    [Parameter]
    public bool settings { get; set; }

    [Parameter]
    public Habit habit { get; set; }

    [Parameter]
    public EventCallback Refresh { get; set; }

    public string doneClass = "";

    public string editMenu = "nonedit";



    async Task ChangeHabitDoneStatus()
    {
        DateOnly date = await localStorageService.GetItemAsync<DateOnly>("day");
        HabitCompleteStatus todayStatus = habit.DailyCompleteStatus.Where(c => c.Date == date).FirstOrDefault()!;
        if (todayStatus is null)
            await AddHabitCompleteStatus(date);
        else

        if (todayStatus.Complete)
        {
            doneClass = "failed";
            habit.DailyCompleteStatus.Where(c => c.Date == date).First().Complete = false;
            UpdateHabit();
        }
        else
        {
            doneClass = "complete";
            habit.DailyCompleteStatus.Where(c => c.Date == date).First().Complete = true;
            UpdateHabit();
        }
    }


    async Task AddHabitCompleteStatus(DateOnly date)
    {
        int userId = await localStorageService.GetItemAsync<int>("userId");
        User user = mapper.Map<User>(await userService.GetUserById(userId));

        HabitCompleteStatus newHabitCompleteStatus = new()
            {
                User = user,
                Date = date,
                Complete = true
            };

        habit.DailyCompleteStatus = new List<HabitCompleteStatus>(habit.DailyCompleteStatus);
        habit.DailyCompleteStatus.Add(newHabitCompleteStatus);
        await UpdateHabit();

    }

    async Task UpdateHabit()
    {
        habit.HabitList.Habits = new List<Habit>();
        HabitDto newHabitDto = await habitService.UpdateHabit(mapper.Map<HabitDto>(habit));
        habit = mapper.Map<Habit>(newHabitDto);
        StateHasChanged();
        await OnInitializedAsync();
    }


    protected async override Task OnInitializedAsync()
    {
        DateOnly date = await localStorageService.GetItemAsync<DateOnly>("day");
        HabitCompleteStatus todayStatus = habit.DailyCompleteStatus.Where(c => c.Date == date).FirstOrDefault()!;
        if (todayStatus is null)
            doneClass = "";
        else if (todayStatus.Complete)
            doneClass = "complete";
        else
            doneClass = "failed";        base.OnInitialized();
    }


    public async Task DeleteHabit()
    {
        habit.HabitList.Habits = new List<Habit>();
        HabitDto habitToDelete = mapper.Map<HabitDto>(habit);
        await habitService.DeleteHabit(habitToDelete);
        await Refresh.InvokeAsync();
        StateHasChanged();
    }


    public void EditHabit()
    {
        if(editMenu == "nonedit")
        {
            editMenu = "edit";
        }
        else
        {
            editMenu = "nonedit";
        }
    }

}
